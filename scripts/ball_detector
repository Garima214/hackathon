#!/usr/bin/env python

import numpy as np
import cv2
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
from python_pkg.state_machine import StateMachine
from python_pkg.image_detect import detect_image
from cv_bridge import CvBridge, CvBridgeError

def subscribe():
    eventin_sub = rospy.Subscriber("/ball_detector_node/event_out", String, eventin_cb)
    
def eventin_cb(msg):
    m.set_start(msg.data)
    m.run(msg.data)

def image_capture(image):
    print "Picking image from Topic" 
    bridge = CvBridge()
    try:	
        cv_image = bridge.imgmsg_to_cv2(image, "bgr8")
	cv2.waitKey(0)
    except CvBridgeError as e:
	print (e)
	cv2.waitKey(0)
        cv2.destroyAllWindows()    
    result = detect_image(cv_image)
    print "RES: ", result
    m.run(result)
    return result


def image_processing(msg):  
    #Subscribe to image_raw topic
    image_sub = rospy.Subscriber("/usb_cam/image_raw", Image,image_capture)	
    print "IMAGE  SUB: ", image_sub
    return ("Found", None)

if __name__ == '__main__':
    # Initialize subscriber node
    rospy.init_node('sub_ball_detector_node', anonymous=False)    
    
    #State machine 
    m = StateMachine()
    m.add_state("Not_Found", image_processing)
    m.add_state("Found", None, end_state=1)
    m.add_state("e_start", image_processing)
    m.add_state("e_stop", None, end_state=1)

    print "SUBSCRIBING..."
    # Subscribing to event_out topic
    eventin_sub = rospy.Subscriber("/ball_detector_node/event_out", String, eventin_cb)
    rospy.spin()
